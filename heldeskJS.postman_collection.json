{
	"info": {
		"_postman_id": "7e7dbd37-fe65-4eda-8dd2-da3879a7ba1b",
		"name": "heldeskJS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24373883"
	},
	"item": [
		{
			"name": "http://localhost:3000/todo/get (OK)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time ok\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response application/json ok\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"pm.test(\"Response fields ok\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo).to.have.property('todoId');",
							"        pm.expect(todo).to.have.property('todoStatus');",
							"        pm.expect(todo).to.have.property('todoTitle');",
							"        pm.expect(todo).to.have.property('todoText');",
							"        pm.expect(todo).to.have.property('createdAt');",
							"        pm.expect(todo).to.have.property('updatedAt');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate TODO properties ok\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo.todoId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoId should be a non-empty string\");",
							"        pm.expect(todo.todoStatus).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoStatus should be a non-empty string\");",
							"        pm.expect(todo.todoTitle).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoTitle should be a non-empty string\");",
							"        pm.expect(todo.todoText).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoText should be a non-empty string\");",
							"        pm.expect(todo.todoNote).to.be.a('string');",
							"        pm.expect(todo.createdAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"createdAt should be a non-empty string\");",
							"        pm.expect(todo.updatedAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"updatedAt should be a non-empty string\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"createdAt and updatedAt are in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"    pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"hello\",\n    \"number\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/get",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (Empty toDate)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time ok\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response application/json ok\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response fields ok\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"hello\",\n    \"number\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/get?toDate=01.01.2025",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"get"
					],
					"query": [
						{
							"key": "toDate",
							"value": "01.01.2025"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (OK toDate)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time ok\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response application/json ok\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response fields ok\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo).to.have.property('todoId');",
							"        pm.expect(todo).to.have.property('todoStatus');",
							"        pm.expect(todo).to.have.property('todoTitle');",
							"        pm.expect(todo).to.have.property('todoText');",
							"        pm.expect(todo).to.have.property('createdAt');",
							"        pm.expect(todo).to.have.property('updatedAt');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate TODO properties ok\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo.todoId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoId should be a non-empty string\");",
							"        pm.expect(todo.todoStatus).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoStatus should be a non-empty string\");",
							"        pm.expect(todo.todoTitle).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoTitle should be a non-empty string\");",
							"        pm.expect(todo.todoText).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoText should be a non-empty string\");",
							"        pm.expect(todo.todoNote).to.be.a('string');",
							"        pm.expect(todo.createdAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"createdAt should be a non-empty string\");",
							"        pm.expect(todo.updatedAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"updatedAt should be a non-empty string\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"createdAt and updatedAt are in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"    pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"hello\",\n    \"number\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/get?toDate=01.01.2026",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"get"
					],
					"query": [
						{
							"key": "toDate",
							"value": "01.01.2026"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (OK all date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time ok\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response application/json ok\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response fields ok\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo).to.have.property('todoId');",
							"        pm.expect(todo).to.have.property('todoStatus');",
							"        pm.expect(todo).to.have.property('todoTitle');",
							"        pm.expect(todo).to.have.property('todoText');",
							"        pm.expect(todo).to.have.property('createdAt');",
							"        pm.expect(todo).to.have.property('updatedAt');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate TODO properties ok\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo.todoId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoId should be a non-empty string\");",
							"        pm.expect(todo.todoStatus).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoStatus should be a non-empty string\");",
							"        pm.expect(todo.todoTitle).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoTitle should be a non-empty string\");",
							"        pm.expect(todo.todoText).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoText should be a non-empty string\");",
							"        pm.expect(todo.todoNote).to.be.a('string');",
							"        pm.expect(todo.createdAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"createdAt should be a non-empty string\");",
							"        pm.expect(todo.updatedAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"updatedAt should be a non-empty string\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"createdAt and updatedAt are in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"    pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"hello\",\n    \"number\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/get?toDate=12.03.2026&fromDate=05.01.1999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"get"
					],
					"query": [
						{
							"key": "toDate",
							"value": "12.03.2026"
						},
						{
							"key": "fromDate",
							"value": "05.01.1999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (empty all date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time ok\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response application/json ok\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"pm.test(\"Response fields ok\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"hello\",\n    \"number\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/get?toDate=12.03.2020&fromDate=05.01.2021",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"get"
					],
					"query": [
						{
							"key": "toDate",
							"value": "12.03.2020"
						},
						{
							"key": "fromDate",
							"value": "05.01.2021"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (OK fromDate)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time ok\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response application/json ok\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response fields ok\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo).to.have.property('todoId');",
							"        pm.expect(todo).to.have.property('todoStatus');",
							"        pm.expect(todo).to.have.property('todoTitle');",
							"        pm.expect(todo).to.have.property('todoText');",
							"        pm.expect(todo).to.have.property('createdAt');",
							"        pm.expect(todo).to.have.property('updatedAt');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate TODO properties ok\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo.todoId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoId should be a non-empty string\");",
							"        pm.expect(todo.todoStatus).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoStatus should be a non-empty string\");",
							"        pm.expect(todo.todoTitle).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoTitle should be a non-empty string\");",
							"        pm.expect(todo.todoText).to.be.a('string').and.to.have.lengthOf.at.least(1, \"todoText should be a non-empty string\");",
							"        pm.expect(todo.todoNote).to.be.a('string');",
							"        pm.expect(todo.createdAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"createdAt should be a non-empty string\");",
							"        pm.expect(todo.updatedAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"updatedAt should be a non-empty string\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"createdAt and updatedAt are in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"    pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"hello\",\n    \"number\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/get?fromDate=12.03.2025",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"get"
					],
					"query": [
						{
							"key": "fromDate",
							"value": "12.03.2025"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (empty fromDate)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time ok\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Response application/json ok\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response fields ok\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"hello\",\n    \"number\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/get?fromDate=13.03.2026",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"get"
					],
					"query": [
						{
							"key": "fromDate",
							"value": "13.03.2026"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (WRONG fromDate)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"  pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Error field exists in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response application/json ok\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"pm.test(\"Error field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"hello\",\n    \"number\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/get?fromDate=13.13.2026",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"get"
					],
					"query": [
						{
							"key": "fromDate",
							"value": "13.13.2026"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (create OK)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.include.all.keys('todoTitle', 'todoText', 'todoId', 'todoStatus', 'createdAt', 'updatedAt');",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"createdAt, and updatedAt are in valid date/time format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    [\"createdAt\", \"updatedAt\"].forEach(key => {",
							"        pm.expect(responseData[key]).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"hello\",\n    \"text\": \"hello text\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (create ERROR)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"  pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('error');",
							"});",
							"",
							"",
							"pm.test(\"Error field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"hello\",\n    \"number\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/create?q=q&foo=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"create"
					],
					"query": [
						{
							"key": "q",
							"value": "q"
						},
						{
							"key": "foo",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (create UUID bad)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"    pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Error is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"hello\",\n    \"text\": \"hello text\",\n    \"uuid\": \"00000000-0000-0000-0000-000000000001xxx\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/create?q=q&foo=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"create"
					],
					"query": [
						{
							"key": "q",
							"value": "q"
						},
						{
							"key": "foo",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (create UUID OK)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('todoId');",
							"    pm.expect(responseData).to.have.property('todoTitle');",
							"    pm.expect(responseData).to.have.property('todoText');",
							"    pm.expect(responseData).to.have.property('todoStatus');",
							"    pm.expect(responseData).to.have.property('todoNote');",
							"    pm.expect(responseData).to.have.property('createdAt');",
							"    pm.expect(responseData).to.have.property('updatedAt');",
							"});",
							"",
							"",
							"pm.test(\"TodoId, createdAt, and updatedAt are in valid date/time format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.todoId).to.be.equal(\"00000000-0000-0000-0000-000000000001\")",
							"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"createdAt should be in ISO 8601 format\");",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"updatedAt should be in ISO 8601 format\");",
							"});",
							"",
							"",
							"pm.test(\"Todo title, text, and note are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.todoTitle).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Todo title should not be empty\");",
							"  pm.expect(responseData.todoText).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Todo text should not be empty\");",
							"  pm.expect(responseData.todoNote).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"hello\",\n    \"text\": \"hello text\",\n    \"uuid\": \"00000000-0000-0000-0000-000000000001\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/create?q=q&foo=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"create"
					],
					"query": [
						{
							"key": "q",
							"value": "q"
						},
						{
							"key": "foo",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/get (create UUID exists)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"  pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Error field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"hello\",\n    \"text\": \"hello text\",\n    \"uuid\": \"00000000-0000-0000-0000-000000000001\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/create?q=q&foo=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"create"
					],
					"query": [
						{
							"key": "q",
							"value": "q"
						},
						{
							"key": "foo",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/start (OK)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and updated\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('updated');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Updated is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.updated).to.be.a('number');",
							"  pm.expect(responseData.updated).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"00000000-0000-0000-0000-000000000001\",\n    \"status\": \"progress\",\n    \"note\": \"start text\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/start",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/start (ERROR)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.updated).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string', \"Status should be a string\");",
							"  pm.expect(responseData.updated).to.be.a('number', \"Updated should be a number\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"90000000-0000-0000-0000-000000000009\",\n    \"status\": \"progress\",\n    \"note\": \"start text\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/start",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/start (ERROR UUID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"  pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema - it should have the 'error' field of type string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"90000000-0000-0000-0000-000000000009xxx\",\n    \"status\": \"progress\",\n    \"note\": \"start text\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/start",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/done (OK)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and updated\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('updated');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Updated is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.updated).to.be.a('number');",
							"  pm.expect(responseData.updated).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"00000000-0000-0000-0000-000000000001\",\n    \"status\": \"complete\",\n    \"note\": \"complete text\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/done",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"done"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/cancel (OK)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and updated\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('updated');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Updated is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.updated).to.be.a('number');",
							"  pm.expect(responseData.updated).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"00000000-0000-0000-0000-000000000001\",\n    \"status\": \"cancel\",\n    \"note\": \"cancel text\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/cancel",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"cancel"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/todo/cancell-all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status and updated\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('updated');",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Updated is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.updated).to.be.a('number');",
							"  pm.expect(responseData.updated).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todo/cancel-all",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todo",
						"cancel-all"
					]
				}
			},
			"response": []
		}
	]
}